@page "/student/create"
@page "/student/edit/{StudentId:int}"
@using System.Text.Json;
@using BlazorStudent.Client.Helpers;
@using BlazorStudent.Shared.Dtos;
@using CurrieTechnologies.Razor.SweetAlert2;
@inject HttpClient http
@inject SweetAlertService Swal;
@inject NavigationManager UriHelper


@if (StudentId>0)
{
    <StudentForm StudentId="StudentId" HeaderPage="Edit Student" Student="student" OnValidSubmit="UpdateStudent" />
}
else
{
    <StudentForm  StudentId="0" HeaderPage="Add Student" Student="student" OnValidSubmit="CreateStudent"/>
}
@if (message!=null)
{
    <h3>@message</h3>
}

@code{
    [Parameter] public int StudentId { get; set; }
    Student student = new Student();
    string? message=null;
    protected override async Task OnInitializedAsync()
    {
        if (StudentId>0)
        {
            student = await http.GetFromJsonAsync<Student>($"/StudentService/Get/{StudentId}");
        }
    }
    async Task CreateStudent()
    {
        
        if (student.Fname.Length<3)
        {
            await Swal.FireAsync("خطا...", "نام نباید کمتر از 3 کاراکتر باشد!", "error");
            //StateHasChanged();
            return;
        }
        try
        {
            var result = await http.PostAsJsonAsync("StudentService", student);
            var xx = await result.Content.ReadAsStringAsync();
            var data = JsonSerializer.Deserialize<ResultDto>(xx);
            if (data.isSuccess)
            {
                var alert = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "حالا چی?",
                        Text = "داده جدید ثبت می کنی یا برمی گردی",
                        Icon = SweetAlertIcon.Question,
                        ShowCancelButton = true,
                        ConfirmButtonText = "داده جدیدی ثبت میکنم!",
                        CancelButtonText = "برو به لیست"
                    });

                if (!string.IsNullOrEmpty(alert.Value))
                {
                    student = new Student();
                    StateHasChanged();
                }
                else if (alert.Dismiss == DismissReason.Cancel)
                {
                    UriHelper.NavigateTo($"/student/index");
                }
            }
            else
            {
                await Swal.FireAsync("خطا...", data.message, "error");
            }

          
        }
        catch (Exception ex)
        {

            await Swal.FireAsync("خطا...",ex.Message, "error");
        }
       
     
    }
    async Task UpdateStudent()
    {
        try
        {
            var result = await http.PostAsJsonAsync("StudentService/Update", student);
            var xx = await result.Content.ReadAsStringAsync();
            var data = JsonSerializer.Deserialize<ResultDto>(xx);
            if (data.isSuccess)
            {
                await Swal.FireAsync("ذخیره شد!");
                UriHelper.NavigateTo($"/student/index");
            }
            else
            {
                await Swal.FireAsync("خطا...", data.message, "error");
            }
           
        }
        catch (Exception ex)
        {

            message = ex.Message;
        }
    }
}

